plugins {
    alias(libs.plugins.kotlin.android)

    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'jacoco'
}

android {
    namespace 'com.example.cleanarchitecturestudy'
}

apply {
    from('../common.gradle')
}

android {
    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = libs.versions.kotlinCompilerExtension.get()
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true

        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
    }
}

dependencies {
    // lint Module
//    lintChecks project(':lint')

    // multiModule
    implementation project(':domain')
    implementation project(':data')

    implementation(libs.coreKtx)
    implementation(libs.appcompat)
    implementation(libs.material)
    implementation(libs.materialCompose)
    implementation(libs.material3)

    // Compose
    implementation(libs.composeAnimation)
    implementation(libs.uiToolingPreview)
    implementation(libs.composeUi)
    implementation(libs.activityCompose)

    // DataBinding
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"

    implementation "androidx.databinding:databinding-runtime:8.2.2"

    // lifecycle
    implementation(libs.bundles.lifecycle)

    //retrofit2
    implementation(libs.bundles.retrofit)

    // Splash Screen
    implementation(libs.splashScreen)

    // koin
    implementation(libs.bundles.koin)

    // hilt
    implementation(libs.bundles.hilt)
    kapt libs.hiltCompiler
    // Room
    implementation(libs.bundles.room)
    kapt libs.roomCompiler

    //glide
    implementation(libs.glide)
    kapt libs.glideCompiler

    // other library
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation 'com.github.rubensousa:gravitysnaphelper:2.2.1'
    implementation 'com.orhanobut:logger:2.2.0'
    // zxing
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'

    // ktor
    implementation(libs.bundles.ktor)

    // Test Library

    // Espresso
    androidTestImplementation "androidx.test.espresso:espresso-core:3.4.0"
    // Trust
    testImplementation "com.google.truth:truth:1.1.3"
    // Mockito
    testImplementation "org.mockito:mockito-core:3.6.0"
    // Kotlin 으로 사용 시 발생하는 Mockito cannot mock/spy because : - final class 에러 해결을 위해 inline 추가.
    testImplementation "org.mockito:mockito-inline:3.6.0"
    // InstrumentedTest 에서 사용하기 위해 적용.
    androidTestImplementation "org.mockito:mockito-android:3.6.0"
    androidTestImplementation "com.google.truth:truth:1.1.3"
    // Test Implement
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
}

// dependsOn : 유닛 테스트를 수행하는 태스크 이름으로 설정.
//task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
//
//    // reports 생성 확장자
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    def mainSrc = "${project.projectDir}/src/main/java"
//    sourceDirectories.setFrom(files([mainSrc])) // 커버리지를 측정할 소스 디렉터리
//
//    // 커버리지에서 제외할 파일
//    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//    classDirectories.setFrom(files([debugTree])) // 컴파일 결과 파일이 있는 디렉터리 지정.
//
//    // 커버리지 측정 결과를 저장할 파일
//    executionData.setFrom(fileTree(dir: "${buildDir}/jacoco/testDebugUnitTest.exec"))
//}
plugins {
    id ("com.android.application")
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'jacoco'
}

android {
    compileSdkVersion compileSdk_Version
    buildToolsVersion buildTools_Version

    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    defaultConfig {
        minSdkVersion minSdk_Version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    dataBinding {
        enabled = true
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true

        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
    }
}

dependencies {
    // lint Module
    lintChecks project(':lint')

    // multiModule
    implementation project(':domain')
    implementation project(':data')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'

    // Splash Screen
    implementation "androidx.core:core-splashscreen:$splashVersion"

    // koin
    implementation "org.koin:koin-android:$koinVersion"
    implementation "org.koin:koin-androidx-viewmodel:$koinVersion"
    // hilt
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"
    // Room
    implementation "androidx.room:room-runtime:$roomVersion"
    //rxjava
    implementation "io.reactivex.rxjava2:rxjava:2.2.17"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.8.1'
    implementation "io.reactivex.rxjava2:rxkotlin:2.3.0"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'
    // Gson
    implementation "com.squareup.retrofit2:converter-gson:$gsonVersion"
    //coroutine lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$coroutineVersion"
    //ktx extensions
    implementation "androidx.lifecycle:lifecycle-extensions:$ktxVersion"
    //glide
    implementation "com.github.bumptech.glide:glide:$glibeVersion"
    kapt "com.github.bumptech.glide:compiler:$glibeVersion"
    // other library
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation 'com.github.rubensousa:gravitysnaphelper:2.2.1'
    implementation 'com.orhanobut:logger:2.2.0'
    // zxing
//    implementation 'com.journeyapps:zxing-android-embedded:4.1.0'
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'

    // ktor
    implementation "io.ktor:ktor-client-core:$ktorVersion"
    implementation "io.ktor:ktor-client-cio:$ktorVersion"
    implementation "io.ktor:ktor-client-serialization:$ktorVersion"
    implementation "io.ktor:ktor-client-logging-jvm:$ktorVersion"
    implementation "io.ktor:ktor-client-content-negotiation:$ktorVersion"
    implementation "io.ktor:ktor-serialization-kotlinx-json:$ktorVersion"

    // Espresso
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    // Trust
    testImplementation "com.google.truth:truth:$truthVersion"
    // Mockito
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    // Kotlin 으로 사용 시 발생하는 Mockito cannot mock/spy because : - final class 에러 해결을 위해 inline 추가.
    testImplementation "org.mockito:mockito-inline:$mockitoVersion"
    // InstrumentedTest 에서 사용하기 위해 적용.
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
    androidTestImplementation "com.google.truth:truth:$truthVersion"
    // Test Implement
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
}

// dependsOn : 유닛 테스트를 수행하는 태스크 이름으로 설정.
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    // reports 생성 확장자
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def mainSrc = "${project.projectDir}/src/main/java"
    sourceDirectories.setFrom(files([mainSrc])) // 커버리지를 측정할 소스 디렉터리

    // 커버리지에서 제외할 파일
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    classDirectories.setFrom(files([debugTree])) // 컴파일 결과 파일이 있는 디렉터리 지정.

    // 커버리지 측정 결과를 저장할 파일
    executionData.setFrom(fileTree(dir: "${buildDir}/jacoco/testDebugUnitTest.exec"))
}
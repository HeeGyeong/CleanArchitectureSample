UML
Class Diagram

+ : Public
- : Private
# : Protected

'<|.. , ^.. : 실체화, overriding
'<.. : 의존 , 객체를 생성 하거나 사용, 리턴 받아 사용.
'<|-- , ^--: 일반화, 상속을 의미
'<-- : 직접 연관 , 다른 객체의 참조를 가지는 필드
'<--* : 집합 (= 연관)

@startuml
'
'Data Layer
'
object ApiClient {
+BASE_URL = "Api URL"
}

interface ApiInterface {
+getSearchMovie(query: String, start: Int = 1, display: Int = 15) : Single<MovieResponse>
}

MovieResponse <-- ApiInterface

interface MovieDao {
+insertMovies(movies: List<MovieEntity>): Completable
+getAllMovies(): Single<List<MovieEntity>>
+getMoviesByTitle(title: String): Single<List<MovieEntity>>
+deleteAllMovies(): Completable
}

abstract class MovieDatabase {
+movieDao(): MovieDao
}

MovieDao <.. MovieDatabase

object Mapper {
.
+mapperToMovie(movies: List<MovieEntity>): List<Movie>
+mapperToRanking(ranking: List<RankingEntity>): List<Ranking>
}

'Data Class
object MovieEntity {
+actor: String
+director: String
+image: String
+link: String
+pubDate: String
+subtitle: String
+title: String
+userRating: String
}

'Data class
object MovieResponse {
+display: Int
+movies: List<MovieEntity>
+lastBuilderDate: String
+start: Int
+total: Int
}

MovieEntity <-- MovieResponse

interface MovieLocalDataSource {
+insertMovies(movies: List<MovieEntity>): Completable
+getAllMovies(): Single<List<MovieEntity>>
+getSearchMovies(title: String): Single<List<MovieEntity>>
+deleteAllMovies(): Completable
}


class MovieLocalDataSourceImpl {
+insertMovies(movies: List<MovieEntity>): Completable
+getAllMovies(): Single<List<MovieEntity>>
+getSearchMovies(title: String): Single<List<MovieEntity>>
+deleteAllMovies(): Completable
}

MovieDao <.. MovieLocalDataSourceImpl
MovieLocalDataSource ^.. MovieLocalDataSourceImpl
MovieEntity <-- MovieLocalDataSourceImpl

interface MovieRemoteDataSource {
+getSearchMovies(query: String, start: Int = 1): Single<MovieResponse>
}

class MovieRemoteDataSourceImpl {
+getSearchMovies(query: String, start: Int): Single<MovieResponse>
}

ApiInterface <.. MovieRemoteDataSourceImpl
MovieRemoteDataSource ^.. MovieRemoteDataSourceImpl

class MovieRepositoryImpl {
+getSearchMovies(query: String): Flowable<List<Movie>>
+getLocalSearchMovies(query: String): Flowable<List<Movie>>
+getRemoteSearchMovies(query: String): Single<List<Movie>>
+getPagingMovies(query: String,offset: Int): Single<List<Movie>>
}

MovieRemoteDataSource <.. MovieRepositoryImpl
MovieLocalDataSource <.. MovieRepositoryImpl
MovieRepository ^.. MovieRepositoryImpl
Mapper <.. MovieRepositoryImpl

class PreferenceManager

'
' Domain Layer
'

' Data Class
object Movie {
+actor: String
+director: String
+image: String
+link: String
+pubDate: String
+subtitle: String
+title: String
+userRating: String
}

interface MovieRepository {
+getSearchMovies(query: String): Flowable<List<Movie>>
+getLocalSearchMovies(query: String): Flowable<List<Movie>>
+getRemoteSearchMovies(query: String): Single<List<Movie>>
+getPagingMovies(query: String,offset: Int): Single<List<Movie>>
}

class GetLocalMoviesUseCase {
+execute(query: String): Flowable<List<Movie>>
}

MovieRepository <.. GetLocalMoviesUseCase

class GetMoviesUseCase {
+execute(query: String): Flowable<List<Movie>>
}

MovieRepository <.. GetMoviesUseCase

class GetPagingMoviesUseCase {
+execute(query: String,offset: Int): Single<List<Movie>>
}

MovieRepository <.. GetPagingMoviesUseCase

'
' Presentation Layer
'
class BaseActivity {
+binding: B
-compositeDisposable: CompositeDisposable

#showToast(msg: String)
}


class BaseViewModel {
#compositeDisposable: CompositeDisposable
-_isLoading: MutableLiveData<Boolean>
+isLoading: LiveData<Boolean>

+showProgress()
+hideProgress()
+onCleared()
}

'class KoinApplication() {
'}
'
'Module <.. KoinApplication
'
'object Module {
'+ApiModule: Module
'+LocalDataModule: Module
'+NetworkModule: Module
'+RemoteDataModule: Module
'+RepositoryModule: Module
'+UseCaseModule: Module
'+ViewModelModule: Module
'}
'
'ApiInterface <-- Module
'ApiClient <-- Module
'MovieLocalDataSource <-- Module
'MovieLocalDataSourceImpl <.. Module
'MovieDao <-- Module
'MovieDatabase <.. Module
'NetworkManager <.. Module
'MovieRemoteDataSource <-- Module
'MovieRemoteDataSourceImpl <.. Module
'MovieRepository <-- Module
'MovieRepositoryImpl <.. Module
'GetMoviesUseCase <.. Module
'GetPagingMoviesUseCase <.. Module
'GetLocalMoviesUseCase <.. Module
'MovieSearchViewModel <.. Module

class NetworkManager {
+checkNetworkState(): Boolean
}

class MovieAdapter {
+onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder
class ViewHolder
+bind(movie: Movie)
}

class MovieSearchActivity {
-movieAdapter: MovieAdapter
-viewModel: MovieSearchViewModel

-initAdapter()
-initViewModelCallback()
}

BaseActivity ^-- MovieSearchActivity
MovieAdapter <.. MovieSearchActivity
MovieSearchViewModel <.. MovieSearchActivity

class MovieSearchViewModel {
-currentQuery: String = ""
+query: MutableLiveData<String>
-_movieList: MutableLiveData<MutableList<Movie>>
+movieList: LiveData<MutableList<Movie>>
-_toastMsg: MutableLiveData<MessageSet>
+toastMsg: LiveData<<MessageSet>

+requestMovie()
+requestPagingMovie()
-checkNetworkState(): Boolean
-requestLocalMovies()
}

BaseViewModel ^-- MovieSearchViewModel
GetMoviesUseCase <.. MovieSearchViewModel
GetPagingMoviesUseCase <.. MovieSearchViewModel
getLocalSearchMovies <.. MovieSearchViewModel
NetworkManager <.. MovieSearchViewModel
MessageSet <.. MovieSearchViewModel

enum MessageSet {
+LAST_PAGE
+EMPTY_QUERY
+NETWORK_NOT_CONNECTED
+ERROR
+SUCCESS
+NO_RESULT
+LOCAL_SUCCESS
}

class MainActivity {
+btnClick(view: View)
}

MovieSearchActivity <.. MainActivity
@enduml
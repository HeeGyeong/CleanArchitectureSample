// Generated by Dagger (https://dagger.dev).
package com.example.cleanarchitecturestudy.di;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.cleanarchitecturestudy.hilt.ApiModule;
import com.example.cleanarchitecturestudy.hilt.ApiModule_ProvideApiInterfaceFactory;
import com.example.cleanarchitecturestudy.hilt.ApiModule_ProvideHeaderInterceptorFactory;
import com.example.cleanarchitecturestudy.hilt.ApiModule_ProvideHttpClientFactory;
import com.example.cleanarchitecturestudy.hilt.ApiModule_ProvideLoggingInterceptorFactory;
import com.example.cleanarchitecturestudy.hilt.ApiModule_ProvideOkHttpClientFactory;
import com.example.cleanarchitecturestudy.hilt.ApiModule_ProvideRetrofitFactory;
import com.example.cleanarchitecturestudy.hilt.DataModule;
import com.example.cleanarchitecturestudy.hilt.DataModule_ProvideKtorInterfaceFactory;
import com.example.cleanarchitecturestudy.hilt.DataModule_ProvideLocalDataSourceFactory;
import com.example.cleanarchitecturestudy.hilt.DataModule_ProvideMovieDaoFactory;
import com.example.cleanarchitecturestudy.hilt.DataModule_ProvideMovieRepositoryFactory;
import com.example.cleanarchitecturestudy.hilt.DataModule_ProvideRemoteDataSourceFactory;
import com.example.cleanarchitecturestudy.hilt.DataModule_ProvideRoomFactory;
import com.example.cleanarchitecturestudy.utils.NetworkManager;
import com.example.cleanarchitecturestudy.view.search.MovieSearchActivity;
import com.example.cleanarchitecturestudy.view.search.MovieSearchViewModel;
import com.example.cleanarchitecturestudy.view.search.MovieSearchViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.cleanarchitecturestudy.view.web.WebViewActivity;
import com.example.cleanarchitecturestudy.view.web.WebViewModel;
import com.example.cleanarchitecturestudy.view.web.WebViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.data.api.ApiInterface;
import com.example.data.api.KtorInterface;
import com.example.data.db.movie.MovieDao;
import com.example.data.db.movie.MovieDatabase;
import com.example.data.repository.search.local.MovieLocalDataSource;
import com.example.data.repository.search.remote.MovieRemoteDataSource;
import com.example.domain.repository.MovieRepository;
import com.example.domain.usecase.movie.GetLocalMoviesUseCase;
import com.example.domain.usecase.movie.GetMoviesUseCase;
import com.example.domain.usecase.movie.GetPagingMoviesUseCase;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import io.ktor.client.HttpClient;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerDIApplication_HiltComponents_SingletonC extends DIApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private volatile Object interceptor = new MemoizedSentinel();

  private volatile Object httpLoggingInterceptor = new MemoizedSentinel();

  private volatile Object okHttpClient = new MemoizedSentinel();

  private volatile Object retrofit = new MemoizedSentinel();

  private volatile Object apiInterface = new MemoizedSentinel();

  private volatile Object movieRemoteDataSource = new MemoizedSentinel();

  private volatile Object movieDatabase = new MemoizedSentinel();

  private volatile Object movieDao = new MemoizedSentinel();

  private volatile Object movieLocalDataSource = new MemoizedSentinel();

  private volatile Object httpClient = new MemoizedSentinel();

  private volatile Object ktorInterface = new MemoizedSentinel();

  private volatile Object movieRepository = new MemoizedSentinel();

  private DaggerDIApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private Interceptor interceptor() {
    Object local = interceptor;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = interceptor;
        if (local instanceof MemoizedSentinel) {
          local = ApiModule_ProvideHeaderInterceptorFactory.provideHeaderInterceptor();
          interceptor = DoubleCheck.reentrantCheck(interceptor, local);
        }
      }
    }
    return (Interceptor) local;
  }

  private HttpLoggingInterceptor httpLoggingInterceptor() {
    Object local = httpLoggingInterceptor;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = httpLoggingInterceptor;
        if (local instanceof MemoizedSentinel) {
          local = ApiModule_ProvideLoggingInterceptorFactory.provideLoggingInterceptor();
          httpLoggingInterceptor = DoubleCheck.reentrantCheck(httpLoggingInterceptor, local);
        }
      }
    }
    return (HttpLoggingInterceptor) local;
  }

  private OkHttpClient okHttpClient() {
    Object local = okHttpClient;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = okHttpClient;
        if (local instanceof MemoizedSentinel) {
          local = ApiModule_ProvideOkHttpClientFactory.provideOkHttpClient(interceptor(), httpLoggingInterceptor());
          okHttpClient = DoubleCheck.reentrantCheck(okHttpClient, local);
        }
      }
    }
    return (OkHttpClient) local;
  }

  private Retrofit retrofit() {
    Object local = retrofit;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = retrofit;
        if (local instanceof MemoizedSentinel) {
          local = ApiModule_ProvideRetrofitFactory.provideRetrofit(okHttpClient());
          retrofit = DoubleCheck.reentrantCheck(retrofit, local);
        }
      }
    }
    return (Retrofit) local;
  }

  private ApiInterface apiInterface() {
    Object local = apiInterface;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = apiInterface;
        if (local instanceof MemoizedSentinel) {
          local = ApiModule_ProvideApiInterfaceFactory.provideApiInterface(retrofit());
          apiInterface = DoubleCheck.reentrantCheck(apiInterface, local);
        }
      }
    }
    return (ApiInterface) local;
  }

  private MovieRemoteDataSource movieRemoteDataSource() {
    Object local = movieRemoteDataSource;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = movieRemoteDataSource;
        if (local instanceof MemoizedSentinel) {
          local = DataModule_ProvideRemoteDataSourceFactory.provideRemoteDataSource(apiInterface());
          movieRemoteDataSource = DoubleCheck.reentrantCheck(movieRemoteDataSource, local);
        }
      }
    }
    return (MovieRemoteDataSource) local;
  }

  private MovieDatabase movieDatabase() {
    Object local = movieDatabase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = movieDatabase;
        if (local instanceof MemoizedSentinel) {
          local = DataModule_ProvideRoomFactory.provideRoom(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          movieDatabase = DoubleCheck.reentrantCheck(movieDatabase, local);
        }
      }
    }
    return (MovieDatabase) local;
  }

  private MovieDao movieDao() {
    Object local = movieDao;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = movieDao;
        if (local instanceof MemoizedSentinel) {
          local = DataModule_ProvideMovieDaoFactory.provideMovieDao(movieDatabase());
          movieDao = DoubleCheck.reentrantCheck(movieDao, local);
        }
      }
    }
    return (MovieDao) local;
  }

  private MovieLocalDataSource movieLocalDataSource() {
    Object local = movieLocalDataSource;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = movieLocalDataSource;
        if (local instanceof MemoizedSentinel) {
          local = DataModule_ProvideLocalDataSourceFactory.provideLocalDataSource(movieDao());
          movieLocalDataSource = DoubleCheck.reentrantCheck(movieLocalDataSource, local);
        }
      }
    }
    return (MovieLocalDataSource) local;
  }

  private HttpClient httpClient() {
    Object local = httpClient;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = httpClient;
        if (local instanceof MemoizedSentinel) {
          local = ApiModule_ProvideHttpClientFactory.provideHttpClient();
          httpClient = DoubleCheck.reentrantCheck(httpClient, local);
        }
      }
    }
    return (HttpClient) local;
  }

  private KtorInterface ktorInterface() {
    Object local = ktorInterface;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = ktorInterface;
        if (local instanceof MemoizedSentinel) {
          local = DataModule_ProvideKtorInterfaceFactory.provideKtorInterface(httpClient());
          ktorInterface = DoubleCheck.reentrantCheck(ktorInterface, local);
        }
      }
    }
    return (KtorInterface) local;
  }

  private MovieRepository movieRepository() {
    Object local = movieRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = movieRepository;
        if (local instanceof MemoizedSentinel) {
          local = DataModule_ProvideMovieRepositoryFactory.provideMovieRepository(movieRemoteDataSource(), movieLocalDataSource(), ktorInterface());
          movieRepository = DoubleCheck.reentrantCheck(movieRepository, local);
        }
      }
    }
    return (MovieRepository) local;
  }

  @Override
  public void injectDIApplication(DIApplication dIApplication) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder apiModule(ApiModule apiModule) {
      Preconditions.checkNotNull(apiModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder dataModule(DataModule dataModule) {
      Preconditions.checkNotNull(dataModule);
      return this;
    }

    public DIApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerDIApplication_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private final class ActivityRetainedCBuilder implements DIApplication_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public DIApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends DIApplication_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements DIApplication_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public DIApplication_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends DIApplication_HiltComponents.ActivityC {
      private ActivityCImpl(Activity activity) {

      }

      @Override
      public void injectMovieSearchActivity(MovieSearchActivity movieSearchActivity) {
      }

      @Override
      public void injectWebViewActivity(WebViewActivity webViewActivity) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerDIApplication_HiltComponents_SingletonC.this.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder());
      }

      @Override
      public Set<String> getViewModelKeys() {
        return SetBuilder.<String>newSetBuilder(2).add(MovieSearchViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(WebViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder();
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      private final class FragmentCBuilder implements DIApplication_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public DIApplication_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(fragment);
        }
      }

      private final class FragmentCI extends DIApplication_HiltComponents.FragmentC {
        private FragmentCI(Fragment fragment) {

        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return ActivityCImpl.this.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        private final class ViewWithFragmentCBuilder implements DIApplication_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public DIApplication_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(view);
          }
        }

        private final class ViewWithFragmentCI extends DIApplication_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCI(View view) {

          }
        }
      }

      private final class ViewCBuilder implements DIApplication_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public DIApplication_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(view);
        }
      }

      private final class ViewCI extends DIApplication_HiltComponents.ViewC {
        private ViewCI(View view) {

        }
      }
    }

    private final class ViewModelCBuilder implements DIApplication_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public DIApplication_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends DIApplication_HiltComponents.ViewModelC {
      private volatile Provider<MovieSearchViewModel> movieSearchViewModelProvider;

      private volatile Provider<WebViewModel> webViewModelProvider;

      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      private GetMoviesUseCase getMoviesUseCase() {
        return new GetMoviesUseCase(DaggerDIApplication_HiltComponents_SingletonC.this.movieRepository());
      }

      private GetPagingMoviesUseCase getPagingMoviesUseCase() {
        return new GetPagingMoviesUseCase(DaggerDIApplication_HiltComponents_SingletonC.this.movieRepository());
      }

      private GetLocalMoviesUseCase getLocalMoviesUseCase() {
        return new GetLocalMoviesUseCase(DaggerDIApplication_HiltComponents_SingletonC.this.movieRepository());
      }

      private NetworkManager networkManager() {
        return new NetworkManager(ApplicationContextModule_ProvideContextFactory.provideContext(DaggerDIApplication_HiltComponents_SingletonC.this.applicationContextModule));
      }

      private MovieSearchViewModel movieSearchViewModel() {
        return new MovieSearchViewModel(getMoviesUseCase(), getPagingMoviesUseCase(), getLocalMoviesUseCase(), networkManager());
      }

      private Provider<MovieSearchViewModel> movieSearchViewModelProvider() {
        Object local = movieSearchViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(0);
          movieSearchViewModelProvider = (Provider<MovieSearchViewModel>) local;
        }
        return (Provider<MovieSearchViewModel>) local;
      }

      private Provider<WebViewModel> webViewModelProvider() {
        Object local = webViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(1);
          webViewModelProvider = (Provider<WebViewModel>) local;
        }
        return (Provider<WebViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(2).put("com.example.cleanarchitecturestudy.view.search.MovieSearchViewModel", (Provider) movieSearchViewModelProvider()).put("com.example.cleanarchitecturestudy.view.web.WebViewModel", (Provider) webViewModelProvider()).build();
      }

      private final class SwitchingProvider<T> implements Provider<T> {
        private final int id;

        SwitchingProvider(int id) {
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.example.cleanarchitecturestudy.view.search.MovieSearchViewModel 
            return (T) ViewModelCImpl.this.movieSearchViewModel();

            case 1: // com.example.cleanarchitecturestudy.view.web.WebViewModel 
            return (T) new WebViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private final class ServiceCBuilder implements DIApplication_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public DIApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends DIApplication_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }
  }
}

// Generated by Dagger (https://dagger.dev).
package com.example.cleanarchitecturestudy.hilt;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<Interceptor> headerInterceptorProvider;

  private final Provider<HttpLoggingInterceptor> loggerInterceptorProvider;

  public ApiModule_ProvideOkHttpClientFactory(Provider<Interceptor> headerInterceptorProvider,
      Provider<HttpLoggingInterceptor> loggerInterceptorProvider) {
    this.headerInterceptorProvider = headerInterceptorProvider;
    this.loggerInterceptorProvider = loggerInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(headerInterceptorProvider.get(), loggerInterceptorProvider.get());
  }

  public static ApiModule_ProvideOkHttpClientFactory create(
      Provider<Interceptor> headerInterceptorProvider,
      Provider<HttpLoggingInterceptor> loggerInterceptorProvider) {
    return new ApiModule_ProvideOkHttpClientFactory(headerInterceptorProvider, loggerInterceptorProvider);
  }

  public static OkHttpClient provideOkHttpClient(Interceptor headerInterceptor,
      HttpLoggingInterceptor LoggerInterceptor) {
    return Preconditions.checkNotNullFromProvides(ApiModule.INSTANCE.provideOkHttpClient(headerInterceptor, LoggerInterceptor));
  }
}

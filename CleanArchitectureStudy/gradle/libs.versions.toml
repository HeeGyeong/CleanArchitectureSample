[versions]
# Android
compileSdk = "35"
minSdk = "24"
targetSdk = "35"
versionCode = "1"
versionName = "1.0"

# Java
javaVersion = "17"

# Kotlin & KSP
kotlinVersion = "1.9.0"
kotlinCompilerExtension = "1.5.2"
ksp = "1.9.0-1.0.13"
applicationVersion = "8.5.2"
libraryVersion = "8.5.2"

# Compose
activityCompose = "1.5.1"
composeVersion = "1.5.2"
composeBom = "2024.02.00"
composeAnimation = "1.7.5"

# Lifecycle
lifecycleRuntimeKtx = "2.8.6"
lifecycleViewmodelKtx = "2.8.6"
lifecycleViewmodelCompose = "2.8.6"

# Koin
koinCore = "3.2.2"
koinAndroid = "3.2.2"
koinAndroidxCompose = "3.2.2"

# Core-dependencies
coreKtx = "1.13.1"
appcompat = "1.7.0"
material = "1.7.4"
material3 = "1.1.0"
room = "2.6.1"
retrofit = "2.9.0"
retrofitRxJavaAdapter = "2.8.1"
gson = "2.10.1"
okhttpLoggingInterceptor = "4.11.0"
ktor = "2.3.7"

# Test
junit = "4.13.2"
androidxTestJunit = "1.2.1"
espressoCore = "3.5.1"
coroutineTest = "1.7.1"
mockk = "1.13.5"
turbine = "1.0.0"
kotlinTestJunit = "1.8.20"
runner = "1.5.2"
rules = "1.5.0"
espressoIntents = "3.5.1"

# Accompanist
accompanistSystemUiController = "0.32.0"
accompanistWebview = "0.24.13-rc"

# Image Loader
glideCompose = "1.0.0-alpha.1"
coilCompose = "2.5.0"
coilGif = "2.6.0"

# Reactive
rxJava = "2.2.17"
rxAndroid = "2.1.1"
rxKotlin = "2.3.0"

# Media
ffmpegKitFull = "5.1"
lottieCompose = "6.0.0"

# WorkManager
workRuntime = "2.9.1"

# Drag and Drop Library
reorderable = "0.9.6"
reorderableCalvin = "2.3.0"

# SSE
okhttpEventSource = "3.0.0"

# Paging
paging = "3.2.1"
pagingCompose = "3.2.1"

[plugins]
android-application = { id = "com.android.application", version.ref = "applicationVersion" }
android-library = { id = "com.android.library", version.ref = "libraryVersion" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlinVersion" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }

[libraries]
# Core-dependencies
coreKtx = { module = "androidx.core:core-ktx", version.ref = "coreKtx" }
appcompat = { module = "androidx.appcompat:appcompat", version.ref = "appcompat" }
material = { module = "androidx.compose.material:material", version.ref = "material" }
material3 = { module = "androidx.compose.material3:material3", version.ref = "material3" }

roomRuntime = { module = "androidx.room:room-runtime", version.ref = "room" }
roomKtx = { module = "androidx.room:room-ktx", version.ref = "room" }
roomCompiler = { module = "androidx.room:room-compiler", version.ref = "room" }

retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
converterGson = { module = "com.squareup.retrofit2:converter-gson", version.ref = "retrofit" }
adapterRxJava2 = { module = "com.squareup.retrofit2:adapter-rxjava2", version.ref = "retrofitRxJavaAdapter" }
gson = { module = "com.google.code.gson:gson", version.ref = "gson" }
okhttpLoggingInterceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okhttpLoggingInterceptor" }

ktorClientAndroid = { module = "io.ktor:ktor-client-android", version.ref = "ktor" }
ktorClientOkHttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktorClientCore = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktorClientLogging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktorClientContentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktorSerializationGson = { module = "io.ktor:ktor-serialization-gson", version.ref = "ktor" }

junit = { module = "junit:junit", version.ref = "junit" }
androidxTestJunit = { module = "androidx.test.ext:junit", version.ref = "androidxTestJunit" }
espressoCore = { module = "androidx.test.espresso:espresso-core", version.ref = "espressoCore" }
junit4 = { module = "androidx.compose.ui:ui-test-junit4", version.ref = "composeVersion" }
uiTooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "composeVersion" }

# Unit Test Dependency
coroutinesTest = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutineTest" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
turbine = { module = "app.cash.turbine:turbine", version.ref = "turbine" }
kotlinTestJunit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlinTestJunit" }
kotlinTest = { module = "org.jetbrains.kotlin:kotlin-test" }

# UI Test Dependency
junitNoVersion = { module = "androidx.compose.ui:ui-test-junit4"}
testRunner = { module = "androidx.test:runner", version.ref = "runner" }
testRules = { module = "androidx.test:rules", version.ref = "rules" }
testManifest = { module = "androidx.compose.ui:ui-test-manifest" }
espressoIntents = { module = "androidx.test.espresso:espresso-intents", version.ref = "espressoIntents" }

# Module
# Compose
composeBom = { module = "androidx.compose:compose-bom", version.ref = "composeBom" }
composeUi = { module = "androidx.compose.ui:ui", version.ref = "composeVersion" }
composeAnimation = { module = "androidx.compose.animation:animation", version.ref = "composeAnimation" }
runtime = { module = "androidx.compose.runtime:runtime", version.ref = "composeVersion" }
runtimeLiveData = { module = "androidx.compose.runtime:runtime-livedata", version.ref = "composeVersion" }
uiToolingPreview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "composeVersion" }
activityCompose = { module = "androidx.activity:activity-compose", version.ref = "activityCompose" }

# Lifecycle
lifecycleViewmodelKtx = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycleViewmodelKtx" }
lifecycleViewmodelCompose = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycleViewmodelCompose" }
lifecycleRuntimeKtx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }

# Dependency Injection - Koin
koinCore = { module = "io.insert-koin:koin-core", version.ref = "koinCore" }
koinAndroid = { module = "io.insert-koin:koin-android", version.ref = "koinAndroid" }
koinAndroidxCompose = { module = "io.insert-koin:koin-androidx-compose", version.ref = "koinAndroidxCompose" }

# Accompanist
accompanistSystemUiController = { module = "com.google.accompanist:accompanist-systemuicontroller", version.ref = "accompanistSystemUiController" }
accompanistWebview = { module = "com.google.accompanist:accompanist-webview", version.ref = "accompanistWebview" }

# Image Loader
glideCompose = { module = "com.github.bumptech.glide:compose", version.ref = "glideCompose" }
coilCompose = { module = "io.coil-kt:coil-compose", version.ref = "coilCompose" }
coilGif = { module = "io.coil-kt:coil-gif", version.ref = "coilGif" }

# Reactive
rxJava = { module = "io.reactivex.rxjava2:rxjava", version.ref = "rxJava" }
rxAndroid = { module = "io.reactivex.rxjava2:rxandroid", version.ref = "rxAndroid" }
rxKotlin = { module = "io.reactivex.rxjava2:rxkotlin", version.ref = "rxKotlin" }

# Media
ffmpegKitFull = { module = "com.arthenica:ffmpeg-kit-full", version.ref = "ffmpegKitFull" }
lottieCompose = { module = "com.airbnb.android:lottie-compose", version.ref = "lottieCompose" }

# WorkManager
workRuntime = { module = "androidx.work:work-runtime", version.ref = "workRuntime" }
workRuntimeKtx = { module = "androidx.work:work-runtime-ktx", version.ref = "workRuntime" }

# Drag and Drop Library
reorderable = { module = "org.burnoutcrew.composereorderable:reorderable", version.ref = "reorderable" }
# Kotlin version issue로 사용하기 힘들다.
reorderableCalvin = { module = "sh.calvin.reorderable:reorderable", version.ref = "reorderableCalvin" }

# SSE
okhttpEventSource = { module = "com.launchdarkly:okhttp-eventsource", version.ref = "okhttpEventSource" }

# Paging
pagingRuntime = { module = "androidx.paging:paging-runtime", version.ref = "paging" }
pagingCompose = { module = "androidx.paging:paging-compose", version.ref = "pagingCompose" }

[bundles]
retrofit = [
    "retrofit",
    "converterGson",
    "adapterRxJava2",
    "gson",
    "okhttpLoggingInterceptor"
]

ktor = [
    "ktorClientAndroid",
    "ktorClientOkHttp",
    "ktorClientContentNegotiation",
    "ktorClientCore",
    "ktorClientLogging",
    "ktorSerializationGson"
]

room = [
    "roomKtx",
    "roomRuntime"
]

androidTest = [
    "androidxTestJunit",
    "espressoCore",
    "junit4",
]

unitTest = [
    "coroutinesTest",
    "mockk",
    "turbine",
    "kotlinTestJunit",
    "kotlinTest"
]

uiTest = [
    "junitNoVersion",
    "espressoCore",
    "testRunner",
    "testRules",
    "espressoIntents",
]

image = [
    "glideCompose",
    "coilCompose",
    "coilGif",
]

koin = [
    "koinAndroid",
    "koinAndroidxCompose",
    "koinCore"
]

reactive = [
    "rxJava",
    "rxAndroid",
    "rxKotlin"
]

lifecycle = [
    "lifecycleRuntimeKtx",
    "lifecycleViewmodelCompose",
    "lifecycleViewmodelKtx"
]

accompanist = [
    "accompanistSystemUiController",
    "accompanistWebview"
]

media = [
    "ffmpegKitFull",
    "lottieCompose"
]

workManager = [
    "workRuntime",
    "workRuntimeKtx"
]

dragAndDrop = [
    "reorderable",
    "reorderableCalvin"
]

paging = [
    "pagingRuntime",
    "pagingCompose"
]